# keywords
keyword_abstract="abstract"
keyword_assert="assert"
keyword_boolean="boolean"
keyword_break="break"
keyword_byte="byte"
keyword_case="case"
keyword_catch="catch"
keyword_char="char"
keyword_class="class"
keyword_const="const"
keyword_continue="continue"
keyword_default="default"
keyword_double="double"
keyword_do="do"
keyword_else="else"
keyword_enum="enum"
keyword_extends="extends"
keyword_false="false"
keyword_finally="finally"
keyword_final="final"
keyword_float="float"
keyword_for="for"
keyword_goto="goto"
keyword_if="if"
keyword_implements="implements"
keyword_import="import"
keyword_instanceof="instanceof"
keyword_interface="interface"
keyword_int="int"
keyword_long="long"
keyword_native="native"
keyword_new="new"
keyword_null="null"
keyword_package="package"
keyword_private="private"
keyword_protected="protected"
keyword_public="public"
keyword_return="return"
keyword_short="short"
keyword_static="static"
keyword_strictfp="strictfp"
keyword_super="super"
keyword_switch="switch"
keyword_synchronized="synchronized"
keyword_this="this"
keyword_throws="throws"
keyword_throw="throw"
keyword_transient="transient"
keyword_true="true"
keyword_try="try"
keyword_void="void"
keyword_volatile="volatile"
keyword_while="while"

# operators
operator_neq="!="
operator_not="!"
operator_lparan="("
operator_rparan=")"
operator_mul_asn="*="
operator_mul="*"
operator_inc="++"
operator_add_asn="+="
operator_add="+"
operator_comma=","
operator_sub_asn="-="
operator_dec="--"
operator_sub"-"
operator_dot="."
operator_div_asn="/="
operator_div="/"
operator_colon=":"
operator_semicolon=";"
operator_lshift_asn=="<<="
operator_lshift="<<"
operator_le="<="
operator_lt="<"
operator_eq="=="
operator_asn="="
operator_gt=">="
operator_rshift_asn=">>="
operator_rrot_asn=">>>="
operator_rrot=">>>"
operator_rshift=">>"
operator_gt=">"
operator_qmark="?"
operator_mod_asn="%="
operator_mod="%"
operator_bitand_asn="&="
operator_logand="&&"
operator_bitand="&"
operator_lbracket="["
operator_rbracket="]"
operator_xor_asn="^="
operator_xor="^"
operator_lbrace="{"
operator_rbrace="}"
operator_compl="~"
operator_bitor_asn="|="
operator_logor="||"
operator_bitor="|"

# literals (with leading space)
literal_hex_prefix=" 0x"
literal_zero=" 0"
literal_all_digits=" 1234567890"
literal_too_long=" 1234567890987654321"

# example identifiers (with leading space)
ident_regurla=" ident"
ident_underbar=" _test"
ident_number=" i123"
ident_all=" _0123test_42"

# comments
oneline_comment="//"
multiline_comment="/*\x0ax\x0ay\x0a*/"
